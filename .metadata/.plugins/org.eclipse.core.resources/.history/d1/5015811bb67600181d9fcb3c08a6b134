package beat_it_1;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

public class BeatIt extends JFrame {
	private Image screenImage;
	private Graphics screenGraphic;
	
	private Image background = new ImageIcon(Main.class.getResource("../images/introBackground.jpg")).getImage();
	
	private ImageIcon startButtonImage = new ImageIcon(Main.class.getResource("../images/startButton.png"));
	private ImageIcon startButtonEnteredImage = new ImageIcon(Main.class.getResource("../images/startButtonEntered.png"));
	private ImageIcon quitButtonImage = new ImageIcon(Main.class.getResource("../images/quitButton.png"));
	private ImageIcon quitButtonEnteredImage = new ImageIcon(Main.class.getResource("../images/quitButtonEntered.png"));
	private ImageIcon quitButtonSquareImage = new ImageIcon(Main.class.getResource("../images/quitButtonSquare.png"));
	private ImageIcon quitButtonSquareEnteredImage = new ImageIcon(Main.class.getResource("../images/quitButtonSquareEntered.png"));
	
	private ImageIcon easyButtonImage = new ImageIcon(Main.class.getResource("../images/easyButton.png"));
	private ImageIcon easyButtonEnteredImage = new ImageIcon(Main.class.getResource("../images/easyButtonEntered.png"));
	private ImageIcon hardButtonImage = new ImageIcon(Main.class.getResource("../images/hardButton.png"));
	private ImageIcon hardButtonEnteredImage = new ImageIcon(Main.class.getResource("../images/hardButtonEntered.png"));
	
	private JButton startButton = new JButton(startButtonImage);
	private JButton quitButton = new JButton(quitButtonImage);
	private JButton easyButton = new JButton(easyButtonImage);
	private JButton hardButton = new JButton(hardButtonImage);
	private JButton backButton = new JButton(quitButtonSquareImage);
	
	private boolean isMainScreen = false;
	private boolean isGameScreen = false;
	
	ArrayList<Track> trackList = new ArrayList<Track>();
	private JButton trackButton0 = new JButton("<html>Emotional Future Bass<br>- AlexZavesa</html>");
	private JButton trackButton1 = new JButton("<html>Future Dubstep<br>- Marco Margna</html>");
	private JButton trackButton2 = new JButton("<html>Raw Power<br>- Vicate Studio</html>");
	private JLabel selectedLabel = new JLabel();

	private Image selectedImage;
	private Music selectedMusic;
	private Music introMusic = new Music("introMusic.mp3", true);
	private int nowSelected = 0;
	
	public static Game game = new Game();
	
	public BeatIt() {
		setUndecorated(true);
		setTitle("Beat It");
		setSize(Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
		setResizable(false);
		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setVisible(true);
		setBackground(new Color(0, 0, 0, 0));
		setLayout(null);
		
		addKeyListener(new KeyListener());
		
		introMusic.start();
		
		trackList.add(new Track("Emotional Future Bass"));
		trackList.add(new Track("Future Dubstep"));
		trackList.add(new Track("Raw Power"));
		
		makeTrackButton(trackButton0, 0);
		makeTrackButton(trackButton1, 1);
		makeTrackButton(trackButton2, 2);
		
		selectedLabel.setBounds(Main.SCREEN_WIDTH - 400, Main.SCREEN_HEIGHT/2 - 79, 400, 4);
		selectedLabel.setVisible(false);
		selectedLabel.setOpaque(true);
		selectedLabel.setBackground(new Color(100, 73, 173)); //Purple
		add(selectedLabel);
		
		startButton.setBounds(Main.SCREEN_WIDTH/2 + 200, 400, 400, 100);
		startButton.setBorderPainted(false);
		startButton.setContentAreaFilled(false);
		startButton.setFocusPainted(false);
		startButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				startButton.setIcon(startButtonEnteredImage);
				startButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
			}
			@Override
			public void mouseExited(MouseEvent e) {
				startButton.setIcon(startButtonImage);
				startButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
			@Override
			public void mousePressed(MouseEvent e) {
				enterMain();
			}
		});
		add(startButton);
		
		quitButton.setBounds(Main.SCREEN_WIDTH/2 + 200, 550, 400, 100);
		quitButton.setBorderPainted(false);
		quitButton.setContentAreaFilled(false);
		quitButton.setFocusPainted(false);
		quitButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				if (isMainScreen)
					quitButton.setIcon(quitButtonSquareEnteredImage);
				else
					quitButton.setIcon(quitButtonEnteredImage);
				quitButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
			}
			@Override
			public void mouseExited(MouseEvent e) {
				if (isMainScreen)
					quitButton.setIcon(quitButtonSquareImage);
				else
					quitButton.setIcon(quitButtonImage);
				quitButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
			@Override
			public void mousePressed(MouseEvent e) {
				System.exit(0);
			}
		});
		add(quitButton);
		
		easyButton.setVisible(false);
		easyButton.setBounds(Main.SCREEN_WIDTH/4 - 265, 500, 250, 67);
		easyButton.setBorderPainted(false);
		easyButton.setContentAreaFilled(false);
		easyButton.setFocusPainted(false);
		easyButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				easyButton.setIcon(easyButtonEnteredImage);
				easyButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
			}
			@Override
			public void mouseExited(MouseEvent e) {
				easyButton.setIcon(easyButtonImage);
				easyButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
			@Override
			public void mousePressed(MouseEvent e) {
				startGame(nowSelected, "easy");
			}
		});
		add(easyButton);
		
		hardButton.setVisible(false);
		hardButton.setBounds(Main.SCREEN_WIDTH/4 + 15, 500, 250, 67);
		hardButton.setBorderPainted(false);
		hardButton.setContentAreaFilled(false);
		hardButton.setFocusPainted(false);
		hardButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				hardButton.setIcon(hardButtonEnteredImage);
				hardButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
			}
			@Override
			public void mouseExited(MouseEvent e) {
				hardButton.setIcon(hardButtonImage);
				hardButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
			@Override
			public void mousePressed(MouseEvent e) {
				startGame(nowSelected, "hard");
			}
		});
		add(hardButton);
		
		backButton.setVisible(false);
		backButton.setBounds(Main.SCREEN_WIDTH - 120, 20, 100, 100);
		backButton.setBorderPainted(false);
		backButton.setContentAreaFilled(false);
		backButton.setFocusPainted(false);
		backButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				backButton.setIcon(quitButtonSquareEnteredImage);
				backButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
			}
			@Override
			public void mouseExited(MouseEvent e) {
				backButton.setIcon(quitButtonSquareImage);
				backButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}
			@Override
			public void mousePressed(MouseEvent e) {
				enterMain();
			}
		});
		add(backButton);
	}
	
	public void paint(Graphics g) {
		screenImage = createImage(Main.SCREEN_WIDTH, Main.SCREEN_HEIGHT);
		screenGraphic = screenImage.getGraphics();
		screenDraw((Graphics2D) screenGraphic);
		g.drawImage(screenImage, 0, 0, null);
	}
	
	public void screenDraw(Graphics2D g) {
		g.drawImage(background, 0, 0, null);
		if(isMainScreen) {
			g.drawImage(selectedImage, Main.SCREEN_WIDTH/4 - 150, Main.SCREEN_HEIGHT/2 - 200, null);
		}
		if(isGameScreen) {
			game.screenDraw(g);
		}
		paintComponents(g);
		this.repaint();
	}
	
	public void selectTrack(int nowSelected) {
		if(selectedMusic != null)
			selectedMusic.close();
		selectedLabel.setBounds(Main.SCREEN_WIDTH - 400, Main.SCREEN_HEIGHT/2 + (nowSelected*125 - 175) + 96, 400, 4);
		selectedImage = new ImageIcon(Main.class.getResource("../images/" + trackList.get(nowSelected).getTrackImage())).getImage();
		selectedMusic = new Music(trackList.get(nowSelected).getSelectedMusic(), true);
		selectedMusic.start();
	}
	
	public void makeTrackButton(JButton trackButton, int trackNum) {
		trackButton.setBounds(Main.SCREEN_WIDTH - 400, Main.SCREEN_HEIGHT/2 + (trackNum*125 - 175), 400, 96);
		trackButton.setBorderPainted(false);
		trackButton.setFocusPainted(false);
		trackButton.setBackground(new Color(240, 240, 240));
		trackButton.setFont(new Font("Lucida Console", Font.BOLD, 25));
		trackButton.setHorizontalAlignment(SwingConstants.LEFT);
		trackButton.setVisible(false);
		trackButton.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {
				trackButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
				trackButton.setBackground(new Color(190, 190, 190));
			}
			@Override
			public void mouseExited(MouseEvent e) {
				trackButton.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
				trackButton.setBackground(new Color(240, 240, 240));
			}
			@Override
			public void mousePressed(MouseEvent e) {
				nowSelected = trackNum;
				selectTrack(nowSelected);
			}
		});
		add(trackButton);
	}
	
	public void startGame(int nowSelected, String difficulty) {
		if(selectedMusic != null)
			selectedMusic.close();
		isMainScreen = false;
		isGameScreen = true;
		quitButton.setVisible(false);
		easyButton.setVisible(false);
		hardButton.setVisible(false);
		backButton.setVisible(true);
		trackButton0.setVisible(false);
		trackButton1.setVisible(false);
		trackButton2.setVisible(false);
		selectedLabel.setVisible(false);
		//background = new ImageIcon(Main.class.getResource("../images/gameBackground.jpg")).getImage();
	}
	
	public void enterMain() {
		startButton.setVisible(false);
		quitButton.setIcon(quitButtonSquareImage);
		quitButton.setVisible(true);
		quitButton.setBounds(Main.SCREEN_WIDTH - 120, 20, 100, 100);
		background = new ImageIcon(Main.class.getResource("../images/mainBackground.jpg")).getImage();
		isMainScreen = true;
		isGameScreen = false;
		easyButton.setVisible(true);
		hardButton.setVisible(true);
		backButton.setVisible(false);
		trackButton0.setVisible(true);
		trackButton1.setVisible(true);
		trackButton2.setVisible(true);
		selectedLabel.setVisible(true);
		introMusic.close();
		selectTrack(0);
	}
}
